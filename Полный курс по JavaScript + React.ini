[end]
23

[06 (д) Eslint. Подсказки об ошибках и автоматическое форматирование кода]
18:33 = инициализация Eslint в каждом новом проекте:
	> npm init
	yes на все вопросы
	> npm init @eslint/config
	команда инициализации со страницы 
	https://eslint.org/docs/latest/use/getting-started
	параграф "Quick start"
18:47 = перенастройка ".eslintrc.js"
	автоформатирование при сохранении

[007. Что такое JS и как его подключить к странице]
включение в HTML:
	<script>...</script>
	<script src="..."></script>
! так не работает:
	<script src="..." />
	
08:45 = script подключается в самом конце html-файла, перед </body>
	это необходимо чтобы:
	1. страница загружается последовательно и если скрипт загрузится и начнёт работу раньше, чем браузер
		отпарсит какой-то элемент, с которым взаимодействует скрипт, то скрипту не с чем будет работать.
	2. страница загружается последовательно и если скрипт грузится медленно (с медленного сервера 
		или вообще не может загрузиться), то страница в браузере перестанет загружаться "зависнет".
	
	Современный учебник JavaScript
	https://learn.javascript.ru/
	
	CSS3-селекторы
	https://learn.javascript.ru/css-selectors
	
	Введение в HTML
	https://developer.mozilla.org/ru/docs/Learn/HTML/Introduction_to_HTML
	
	Введение в CSS
	https://developer.mozilla.org/ru/docs/Learn/CSS/First_steps
	
[009. Переменные и строгий режим]
00:51 =	объявление переменной
	let
	const
05:40 = особенность const: внутри объекта-const можно менять значения переменных.
07:05 = проблемы устаревшего объявления переменной через "var"
09:40 = область видимости let/const/var
11:10 = caniuse.com = проверка поддержки элементов JS в разных браузерах
12:20 = Строгий режим — "use strict" - директива
14:15 = стилистические правила JS

[010. (д) Правила и типы названия переменных]
	переменные, имеющие логический смысл называть осмысленно:
	let carBobyLength

	переменные в логических блоках называть как хочешь:
	for (let i=0; i<10; i++){};
	[111, 222, 123].map( a => ... );

	константы называть большими буквами через подчёркивание:
	const UPPER_SNAKE_KASE
	или как переменные со смыслом, но начинающиеся с подчёркивания:
	const _apiKey = 'apiKey=85139450398570198345';

[011. Классификация типов данных в JavaScript]
	простые типы:
		числа ( (-(2^53)-1)..((2^53)-1) ): 1, 2, ...
		строки: 'string', 'name John'
		логический (boolean): true/false
		null (чего-то не существует)
		undefined (значение не определено)
		Symbol
		BigInt (большие ЦЕЛЫЕ числа. больше, чем "числа" )
объекты:
		специальные:
			массивы: []
			функции: function ...
			объект даты:
			регулярные выражения:
			ошибки:
		определённые нами:
			const obj = {
				name: 'John',
				age: 25,
				isMarried: false
			};

[012. (д) Разница между объектами и массивами и неочевидные синтаксические возможности]
[013. Простое общение с пользователем]
00:38 = alert('текст'); 
	= всплывающее сообщение с текстом
02:12 = const res = confirm('текст'); 
	= всплывающее сообщение с текстом и вариантом выбора кнопами Ok/Cancel
04:12 = const res = prompt('текст', 'ответ по умолчанию. может быть пустой'); 
	= всплывающее сообщение с текстом и вариантом ввода значения и кнопами Ok/Cancel
06:01 = typeof(res)
06:55 = const res = +prompt(...
	= возвращаемый результат будет числовой
10:59 = document.write(_текст_);
	= заменяет текст на странице на _текст_

[014. Интерполяция (ES6)]
[015. Операторы в JS]
01:45 = конкатенация строк:
	4 +  '5' = '45'
	4 + +'5' = 9
	4 + +'5s' = NaN // Not A Number
	если слева от строки поставить знак '+', то строка будет интерпретирована в число
	
	префикс/постфикс форма инкремент/декремент переменных
	++i, i++
	--i, i--
	
06:01 =	% - остаток от деления // 5%2 = 1
06:42 = использование знака "="
	"=" - присвоить 
	"==" - сравнение (по значению)
		2*4 == 8   // true
		2*4 == '8' // true
	"===" - строгое сравнение (по значению и типу)
		2*4 === 8   // true
		2*4 === '8' // false
08:14 = лигические операторы
	&& = И
	|| = ИЛИ
	!  = НЕ '!=', '!=='
// приоритет операторов
// https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Operators/Operator_Precedence#Table

// Побитовые операторы
// https://learn.javascript.ru/bitwise-operators

[016. Учимся работать с системой контроля версий Git и с сервисом GitHub]
08:00 = git init
10:32 = git config --global ...
12:10 = git add
12:26 = git status
14:05 = git commit
16:01 = git log
19:11 = git push // отправить изменения в удалённый репозиторий
21:25 = git branch -M main // переименовать текущую ветку в  'main'

[Git - дополнительные материалы]
'githowto.com/ru'
	11. Алиасы
		git config --global alias.co checkout
		git config --global alias.ci commit
		git config --global alias.st status
		git config --global alias.br branch
		git config --global alias.hist "log --pretty=format:'%h %ad | %s%d [%an]' --graph --date=short"
		git config --global alias.hista "log --pretty=format:'%h %ad | %s%d [%an]' --graph --date=short --all"
		git config --global alias.type 'cat-file -t'
		git config --global alias.dump 'cat-file -p'
	12. checkout <version> - перейти к определённой версии проекта. все файлы проекта станут как в версии <version>
		git checkout <hash> // переключиться на ветку с хэшем <hash>
		git checkout master // переключиться на последний коммит ветки 'master'
	31. Сброс ветки
		использовать команду reset для возврата веток к предыдущему состоянию
		git reset --hard <hash>

'git-scm.com'
	Книга по Git
	https://git-scm.com/book/ru/v2/
	3.2 Ветвление в Git - Основы ветвления и слияния
	https://git-scm.com/book/ru/v2/Ветвление-в-Git-Основы-ветвления-и-слияния
	3.3 Ветвление в Git - Управление ветками
	https://git-scm.com/book/ru/v2/Ветвление-в-Git-Управление-ветками

[017. Как работать с GitHub с разных компьютеров, gitignore и Git Kraken]
07:01 = ошибка новичка: после внесения изменений в проект на GitHub, попытка выгрузить изменения локального репозитория
	'git push'
	вызовет ошибку. требуется сначала загрузить изменения из удалённого репозитория
	'git pull'
	и только после этого выгружать локальный.

[019. Практика, ч.1. Начинаем создавать приложение]
[020. Условия]
	https://learn.javascript.ru/ifelse
04:52 = if () {} else if () {}
05:49 = Условный (тернарный) оператор:

	(var === 10) ? console.log('TRUE') : console.log('FALSE');

	let var = (age > 18) ? true : false;

	let message = (age < 3) ? 'Здравствуй, малыш!' :
  (age < 18) ? 'Привет!' :
  (age < 99) ? 'Здравствуйте!' :
  'Какой необычный возраст!';

08:27 = switch
	всегда производится строгое (===) сравнение!
	https://learn.javascript.ru/switch

	switch(x) {
  case 'value1':  // if (x === 'value1')
    ...
    break;

  case 'value2':  // if (x === 'value2')
    ...
    break;

  default:
    ...
    break;
	}

[021. (д) Логические операторы]
19:30 = оператор И '&&' всегда возвращает первое ложное значение, если оно есть.
	если все условия true, то возвращается значение последнего аргумента.
	console.log(1 && 0);     // 0
	console.log(1 && 5);     // 5
	console.log(null && 5);  // null
	console.log(0 && 'abc'); // 0
	console.log(1 && 'abc'); // 'abc'

21:53 = оператор ИЛИ '||' возвращает первое true значение, если оно есть.
	если все условия false, то возвращается значение последнего аргумента.
	console.log(1 || 0);     // 1
	console.log(0 || 0);     // 0
	console.log(0 || false); // false
	console.log(1 || 5);     // 1
	console.log(null || 5);  // 5
	console.log(0 || 'abc'); // 'abc'
	console.log(1 || 'abc'); // 1

const arr = [ 0, '0', 1, '1', true, 'true', false, 'false', null, NaN, undefined, {}, [], '', ' ', '_' ];

arr.map(val => {
	console.log('>',val,`<\t\t(${ typeof(val) })\t\t= ${ (val)?true:false }`, '\t\t=> ', (true && val) );
});
; > 0 <		(number)		= false 		=>  0
; > 0 <		(string)		= true 		=>  0
; > 1 <		(number)		= true 		=>  1
; > 1 <		(string)		= true 		=>  1
; > true <		(boolean)		= true 		=>  true
; > true <		(string)		= true 		=>  true
; > false <		(boolean)		= false 		=>  false
; > false <		(string)		= true 		=>  false
; > null <		(object)		= false 		=>  null
; > NaN <		(number)		= false 		=>  NaN
; > undefined <		(undefined)		= false 		=>  undefined
; > {} <		(object)		= true 		=>  {}
; > [] <		(object)		= true 		=>  []
; >  <		(string)		= false 		=>  
; >   <		(string)		= true 		=>   
; > _ <		(string)		= true 		=>  _

arr.map(val => {
	console.log('! >',val,`<\t\t(${ typeof(val) })\t\t= ${ (!val)?true:false }`, '\t\t=> ', (true && !val) );
});
; ! > 0 <		(number)		= true 		=>  true
; ! > 0 <		(string)		= false 		=>  false
; ! > 1 <		(number)		= false 		=>  false
; ! > 1 <		(string)		= false 		=>  false
; ! > true <		(boolean)		= false 		=>  false
; ! > true <		(string)		= false 		=>  false
; ! > false <		(boolean)		= true 		=>  true
; ! > false <		(string)		= false 		=>  false
; ! > null <		(object)		= true 		=>  true
; ! > NaN <		(number)		= true 		=>  true
; ! > undefined <		(undefined)		= true 		=>  true
; ! > {} <		(object)		= false 		=>  false
; ! > [] <		(object)		= false 		=>  false
; ! >  <		(string)		= true 		=>  true
; ! >   <		(string)		= false 		=>  false
; ! > _ <		(string)		= false 		=>  false

32:39 = задачи
console.log('> что выведет в консоль код?');
console.log(NaN || 2 || undefined              , 2     );
console.log(NaN && 2 & undefined               , NaN   );
console.log(1 && 2 && 3                        , 3     );
console.log(!1 && 2 && !3                      , false );
console.log(25 || null && !3                   , 25    );
console.log(NaN || null || !3 || undefined || 5, 5     );
console.log(NaN || null && !3 && undefined || 5, 5     );
console.log( 5===5 && 3 > 1 || 5               , true  );

[022. Циклы]
	1. while( условие ){}
	2. do {} while ( условие );
	3. for(let j=30; условие; j++){ continue; ...; } // прервать итерацию цикла
	4. for(let j=40; условие;){ j++;}
	5. for(let j=50;;){ ...; j++; break; } // прервать работу цикл

	continue - пропустить итерацию цикла.
	break - прервать цикл.

[023. (д) Цикл в цикле и метки]
14:55 = метки в циклах: continue - прервать итерацию
	label1: for (let i1=0;i1<3; i1++){
		for (let i3=0; i3<3; i3++) {
			if (i3 ===2) continue label1;
	}}

15:58 = метки в циклах: break - прервать работу
	label1: for (let i1=0;i1<3; i1++){
		for (let i3=0; i3<3; i3++) {
			if (i3 ===2) break label1;
		}
	}

[024. Практика, ч2. Применяем условия и циклы]
